{"version":3,"sources":["../node_modules/n3/src/N3Util.js","../node_modules/n3/src/N3DataFactory.js","../node_modules/n3/src/N3Parser.js","../node_modules/n3/src/N3Writer.js","../node_modules/n3/src/N3Store.js","../node_modules/n3/src/N3StreamParser.js","../node_modules/n3/src/N3StreamWriter.js","../node_modules/n3/src/IRIs.js","../node_modules/n3/src/N3Lexer.js","../node_modules/queue-microtask/index.js"],"names":["isNamedNode","term","termType","isBlankNode","isLiteral","isVariable","isDefaultGraph","inDefaultGraph","quad","graph","prefix","iri","factory","prefixes","defaultPrefixes","Object","create","processPrefix","cache","local","namedNode","Error","N3DataFactory","DEFAULTGRAPH","rdf","namespaces","xsd","_blankNodeCounter","escapedLiteral","quadId","DataFactory","NamedNode","blankNode","name","BlankNode","variable","Variable","literal","value","languageOrDataType","Literal","toLowerCase","datatype","boolean","Number","isFinite","isInteger","integer","double","isNaN","string","defaultGraph","triple","Term","id","this","other","substring","lastIndexOf","atPos","length","substr","datatypeString","dtPos","char","langString","language","DefaultGraph","termFromId","endPos","components","exec","unescapeQuotes","termToId","escapeQuotes","subject","predicate","object","Quad","_subject","_predicate","_object","_graph","toJSON","equals","replace","_","quoted","blankNodePrefix","N3Parser","options","_contextStack","_setBase","baseIRI","initDataFactory","format","match","isTurtle","test","isTriG","isNTriples","isNQuads","isN3","_n3Mode","isLineMode","_supportsNamedGraphs","_readPredicateOrNamedGraph","_readPredicate","_supportsQuads","_supportsRDFStar","_resolveRelativeIRI","_blankNodePrefix","_lexer","lexer","N3Lexer","lineMode","n3","_explicitQuantifiers","explicitQuantifiers","fragmentPos","indexOf","_base","_basePath","_baseRoot","_baseScheme","type","n3Mode","push","inverse","_inversePredicate","blankPrefix","_prefixes","quantified","_quantified","context","pop","token","_error","_callback","_sparqlStyle","_readPrefix","_readBaseIRI","_readSubject","_readNamedGraphLabel","quantifier","_resolveIRI","_namedNode","undefined","_blankNode","_variable","_saveContext","_readBlankNodeHead","RDF_NIL","_readListItem","_readPunctuation","N3_FORSOME","_quantifier","_readQuantifierList","N3_FORALL","_literalValue","_completeSubjectLiteral","_literal","_readEntity","_getPathReader","ABBREVIATIONS","_readBlankNodeTail","_readObject","_readDataTypeOrLang","_getContextEndReader","_readGraph","_readBlankNodePunctuation","_emit","empty","_restoreContext","_readPredicateAfterBlank","item","list","next","previousList","stack","parent","RDF_FIRST","_readListItemDataTypeOrLang","RDF_REST","_completeObjectLiteral","_completeLiteral","listItem","completed","_readCallback","inversePredicate","_readFormulaTail","_readInTopContext","_readQuadPunctuation","_prefix","_readPrefixIRI","prefixNode","_prefixCallback","_readDeclarationPunctuation","_readNamedGraphBlankLabel","entity","QUANTIFIERS_GRAPH","_readQuantifierPunctuation","afterPath","_afterPath","_readPath","_readForwardPath","_readBackwardPath","_readRDFStarTail","_quad","contextStack","_readRDFStarTailOrGraph","message","err","line","previousToken","noop","_removeDotSegments","result","i","pathStart","segmentStart","input","quadCallback","prefixCallback","error","quads","e","t","tokenize","every","parser","first","rest","nil","r","forAll","forSome","owl","sameAs","log","implies","prototype","escape","escapeAll","escapedCharacters","SerializedTerm","N3Writer","outputStream","_prefixRegex","write","_lists","lists","_outputStream","_endStream","end","output","chunk","encoding","done","_lineMode","_writeQuad","_writeQuadLine","_baseIRI","_prefixIRIs","addPrefixes","callback","_write","_inDefaultGraph","_encodeIriOrBlank","_encodeObject","_encodePredicate","_encodeSubject","_prefixMatch","quadToString","map","join","_encodeQuad","startsWith","characterReplacer","prefixMatch","decimal","_encodeLiteral","addQuad","hasPrefixes","IRIlist","prefixList","prefixIRI","RegExp","child","children","contents","elements","Array","_blockedWrite","singleDone","character","charCodeAt","toString","N3Store","_size","_graphs","_id","_ids","_entities","_blankNodeIndex","_factory","addQuads","size","subjects","graphs","graphKey","subjectKey","predicateKey","keys","index0","key0","key1","key2","index1","index2","existed","key","name0","name1","name2","array","tmp","entityKeys","value0","entity0","value1","entity1","values","l","parts","count","isString","uniqueIds","graphItem","predicates","objects","freeze","ids","entities","changed","_addToIndex","removeQuad","getQuads","stream","on","_removeFromIndex","Readable","objectMode","_read","remove","removeMatches","content","subjectId","predicateId","objectId","_getGraphs","graphId","_findInIndex","DatasetCoreAndReadableStream","_countInIndex","some","results","forSubjects","s","_uniqueEntities","_loopBy2Keys","_loopByKey1","_loopByKey0","_loop","forPredicates","p","forObjects","o","forGraphs","g","suggestedName","index","ignoreErrors","onError","node","tails","toRemove","forEach","tailQuad","head","headPos","items","malformed","current","objectQuads","subjectQuads","unshift","removeQuads","Symbol","iterator","String","n3Store","assign","_filtered","filtered","add","delete","has","N3StreamParser","onData","onEnd","decodeStrings","_readableState","parse","event","emit","uri","_transform","_flush","Transform","N3StreamWriter","writer","writableObjectMode","_writer","addPrefix","RDF","XSD","SWAP","escapeSequence","escapeReplacements","illegalIriChars","lineModeRegExps","_iri","_unescapedIri","_simpleQuotedString","_langcode","_blank","_newline","_comment","_whitespace","_endOfFile","invalidRegExp","_simpleApostropheString","_prefixed","_number","_boolean","_keyword","_sparqlKeyword","_shortPredicates","_comments","comments","_literalClosingPos","inputFinished","_input","outputComments","whiteSpaceMatch","comment","_line","firstChar","matchLength","inconclusive","_previousMarker","_unescape","reportSyntaxError","_parseLiteral","toUpperCase","self","_syntaxError","invalid","replaced","sequence","unicode4","unicode8","escapedChar","fromCharCode","parseInt","charCode","opening","openingLength","closingPos","Math","max","backslashCount","raw","lines","split","issue","tokens","_tokenizeToEnd","queueMicrotask","_pendingBuffer","setEncoding","data","Buffer","concat","promise","module","exports","bind","window","global","cb","Promise","resolve","then","catch","setTimeout"],"mappings":"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","file":"static/js/4.3a440860.chunk.js","sourcesContent":["// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({ '': iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  const prefixes = Object.create(null);\n  for (const prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      const cache = Object.create(null);\n      prefixes[prefix] = local => {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error(`Unknown prefix: ${prefix}`);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n","// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\n\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nconst { rdf, xsd } = namespaces;\n\n// eslint-disable-next-line prefer-const\nlet DEFAULTGRAPH;\nlet _blankNodeCounter = 0;\n\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\n\n// ## DataFactory singleton\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  variable,\n  literal,\n  defaultGraph,\n  quad,\n  triple: quad,\n};\nexport default DataFactory;\n\n// ## Term constructor\nexport class Term {\n  constructor(id) {\n    this.id = id;\n  }\n\n  // ### The value of this term\n  get value() {\n    return this.id;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Term)\n      return this.id === other.id;\n    // Otherwise, compare term type and value\n    return !!other && this.termType === other.termType &&\n                      this.value    === other.value;\n  }\n\n  // ### Returns a plain object representation of this term\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n    };\n  }\n}\n\n\n// ## NamedNode constructor\nexport class NamedNode extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'NamedNode';\n  }\n}\n\n// ## Literal constructor\nexport class Literal extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'Literal';\n  }\n\n  // ### The text value of this literal\n  get value() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n\n  // ### The language of this literal\n  get language() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    const id = this.id;\n    let atPos = id.lastIndexOf('\"') + 1;\n    // If \"@\" it follows, return the remaining substring; empty otherwise\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n\n  // ### The datatype IRI of this literal\n  get datatype() {\n    return new NamedNode(this.datatypeString);\n  }\n\n  // ### The datatype string of this literal\n  get datatypeString() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    const id = this.id, dtPos = id.lastIndexOf('\"') + 1;\n    const char = dtPos < id.length ? id[dtPos] : '';\n    // If \"^\" it follows, return the remaining substring\n    return char === '^' ? id.substr(dtPos + 2) :\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\n           (char !== '@' ? xsd.string : rdf.langString);\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both literals were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Literal)\n      return this.id === other.id;\n    // Otherwise, compare term type, value, language, and datatype\n    return !!other && !!other.datatype &&\n                      this.termType === other.termType &&\n                      this.value    === other.value    &&\n                      this.language === other.language &&\n                      this.datatype.value === other.datatype.value;\n  }\n\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n      language: this.language,\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\n    };\n  }\n}\n\n// ## BlankNode constructor\nexport class BlankNode extends Term {\n  constructor(name) {\n    super(`_:${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'BlankNode';\n  }\n\n  // ### The name of this blank node\n  get value() {\n    return this.id.substr(2);\n  }\n}\n\nexport class Variable extends Term {\n  constructor(name) {\n    super(`?${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Variable';\n  }\n\n  // ### The name of this variable\n  get value() {\n    return this.id.substr(1);\n  }\n}\n\n// ## DefaultGraph constructor\nexport class DefaultGraph extends Term {\n  constructor() {\n    super('');\n    return DEFAULTGRAPH || this;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'DefaultGraph';\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through strict equality;\n    // otherwise, compare term types.\n    return (this === other) || (!!other && (this.termType === other.termType));\n  }\n}\n\n// ## DefaultGraph singleton\nDEFAULTGRAPH = new DefaultGraph();\n\n\n// ### Constructs a term from the given internal string ID\nexport function termFromId(id, factory) {\n  factory = factory || DataFactory;\n\n  // Falsy value or empty string indicate the default graph\n  if (!id)\n    return factory.defaultGraph();\n\n  // Identify the term type based on the first character\n  switch (id[0]) {\n  case '?':\n    return factory.variable(id.substr(1));\n  case '_':\n    return factory.blankNode(id.substr(2));\n  case '\"':\n    // Shortcut for internal literals\n    if (factory === DataFactory)\n      return new Literal(id);\n    // Literal without datatype or language\n    if (id[id.length - 1] === '\"')\n      return factory.literal(id.substr(1, id.length - 2));\n    // Literal with datatype or language\n    const endPos = id.lastIndexOf('\"', id.length - 1);\n    return factory.literal(id.substr(1, endPos - 1),\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\n                                   : factory.namedNode(id.substr(endPos + 3)));\n  case '<':\n    const components = quadId.exec(id);\n    return factory.quad(\n      termFromId(unescapeQuotes(components[1]), factory),\n      termFromId(unescapeQuotes(components[2]), factory),\n      termFromId(unescapeQuotes(components[3]), factory),\n      components[4] && termFromId(unescapeQuotes(components[4]), factory)\n    );\n  default:\n    return factory.namedNode(id);\n  }\n}\n\n// ### Constructs an internal string ID from the given term or ID string\nexport function termToId(term) {\n  if (typeof term === 'string')\n    return term;\n  if (term instanceof Term && term.termType !== 'Quad')\n    return term.id;\n  if (!term)\n    return DEFAULTGRAPH.id;\n\n  // Term instantiated with another library\n  switch (term.termType) {\n  case 'NamedNode':    return term.value;\n  case 'BlankNode':    return `_:${term.value}`;\n  case 'Variable':     return `?${term.value}`;\n  case 'DefaultGraph': return '';\n  case 'Literal':      return `\"${term.value}\"${\n    term.language ? `@${term.language}` :\n      (term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : '')}`;\n  case 'Quad':\n    // To identify RDF* quad components, we escape quotes by doubling them.\n    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\n    return `<<${\n        escapeQuotes(termToId(term.subject))\n      } ${\n        escapeQuotes(termToId(term.predicate))\n      } ${\n        escapeQuotes(termToId(term.object))\n      }${\n        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`\n      }>>`;\n  default: throw new Error(`Unexpected termType: ${term.termType}`);\n  }\n}\n\n\n// ## Quad constructor\nexport class Quad extends Term {\n  constructor(subject, predicate, object, graph) {\n    super('');\n    this._subject   = subject;\n    this._predicate = predicate;\n    this._object    = object;\n    this._graph     = graph || DEFAULTGRAPH;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Quad';\n  }\n\n  get subject() {\n    return this._subject;\n  }\n\n  get predicate() {\n    return this._predicate;\n  }\n\n  get object() {\n    return this._object;\n  }\n\n  get graph() {\n    return this._graph;\n  }\n\n  // ### Returns a plain object representation of this quad\n  toJSON() {\n    return {\n      termType:  this.termType,\n      subject:   this._subject.toJSON(),\n      predicate: this._predicate.toJSON(),\n      object:    this._object.toJSON(),\n      graph:     this._graph.toJSON(),\n    };\n  }\n\n  // ### Returns whether this object represents the same quad as the other\n  equals(other) {\n    return !!other && this._subject.equals(other.subject)     &&\n                      this._predicate.equals(other.predicate) &&\n                      this._object.equals(other.object)       &&\n                      this._graph.equals(other.graph);\n  }\n}\nexport { Quad as Triple };\n\n// ### Escapes the quotes within the given literal\nexport function escapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\n}\n\n// ### Unescapes the quotes within the given literal\nexport function unescapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\n}\n\n// ### Creates an IRI\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n}\n\n// ### Creates a blank node\nfunction blankNode(name) {\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\n}\n\n// ### Creates a literal\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string')\n    return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\n\n  // Automatically determine datatype for booleans and numbers\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\n  if (datatype === '') {\n    // Convert a boolean\n    if (typeof value === 'boolean')\n      datatype = xsd.boolean;\n    // Convert an integer or double\n    else if (typeof value === 'number') {\n      if (Number.isFinite(value))\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\n      else {\n        datatype = xsd.double;\n        if (!Number.isNaN(value))\n          value = value > 0 ? 'INF' : '-INF';\n      }\n    }\n  }\n\n  // Create a datatyped literal\n  return (datatype === '' || datatype === xsd.string) ?\n    new Literal(`\"${value}\"`) :\n    new Literal(`\"${value}\"^^${datatype}`);\n}\n\n// ### Creates a variable\nfunction variable(name) {\n  return new Variable(name);\n}\n\n// ### Returns the default graph\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n}\n\n// ### Creates a quad\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n}\n","// **N3Parser** parses N3 documents.\nimport N3Lexer from './N3Lexer';\nimport N3DataFactory from './N3DataFactory';\nimport namespaces from './IRIs';\n\nlet blankNodePrefix = 0;\n\n// ## Constructor\nexport default class N3Parser {\n  constructor(options) {\n    this._contextStack = [];\n    this._graph = null;\n\n    // Set the document IRI\n    options = options || {};\n    this._setBase(options.baseIRI);\n    options.factory && initDataFactory(this, options.factory);\n\n    // Set supported features depending on the format\n    const format = (typeof options.format === 'string') ?\n                 options.format.match(/\\w*$/)[0].toLowerCase() : '',\n        isTurtle = /turtle/.test(format), isTriG = /trig/.test(format),\n        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\n        isN3 = this._n3Mode = /n3/.test(format),\n        isLineMode = isNTriples || isNQuads;\n    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))\n      this._readPredicateOrNamedGraph = this._readPredicate;\n    // Support triples in other graphs\n    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);\n    // Support nesting of triples\n    this._supportsRDFStar = format === '' || /star|\\*$/.test(format);\n    // Disable relative IRIs in N-Triples or N-Quads mode\n    if (isLineMode)\n      this._resolveRelativeIRI = iri => { return null; };\n    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\n                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');\n    this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode, n3: isN3 });\n    // Disable explicit quantifiers by default\n    this._explicitQuantifiers = !!options.explicitQuantifiers;\n  }\n\n  // ## Static class methods\n\n  // ### `_resetBlankNodePrefix` restarts blank node prefix identification\n  static _resetBlankNodePrefix() {\n    blankNodePrefix = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_setBase` sets the base IRI to resolve relative IRIs\n  _setBase(baseIRI) {\n    if (!baseIRI) {\n      this._base = '';\n      this._basePath = '';\n    }\n    else {\n      // Remove fragment if present\n      const fragmentPos = baseIRI.indexOf('#');\n      if (fragmentPos >= 0)\n        baseIRI = baseIRI.substr(0, fragmentPos);\n      // Set base IRI and its components\n      this._base = baseIRI;\n      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :\n                         baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\n      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i);\n      this._baseRoot   = baseIRI[0];\n      this._baseScheme = baseIRI[1];\n    }\n  }\n\n  // ### `_saveContext` stores the current parsing context\n  // when entering a new scope (list, blank node, formula)\n  _saveContext(type, graph, subject, predicate, object) {\n    const n3Mode = this._n3Mode;\n    this._contextStack.push({\n      subject: subject, predicate: predicate, object: object,\n      graph: graph, type: type,\n      inverse: n3Mode ? this._inversePredicate : false,\n      blankPrefix: n3Mode ? this._prefixes._ : '',\n      quantified: n3Mode ? this._quantified : null,\n    });\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      // Every new scope resets the predicate direction\n      this._inversePredicate = false;\n      // In N3, blank nodes are scoped to a formula\n      // (using a dot as separator, as a blank node label cannot start with it)\n      this._prefixes._ = (this._graph ? `${this._graph.id.substr(2)}.` : '.');\n      // Quantifiers are scoped to a formula\n      this._quantified = Object.create(this._quantified);\n    }\n  }\n\n  // ### `_restoreContext` restores the parent context\n  // when leaving a scope (list, blank node, formula)\n  _restoreContext() {\n    const context = this._contextStack.pop(), n3Mode = this._n3Mode;\n    this._subject   = context.subject;\n    this._predicate = context.predicate;\n    this._object    = context.object;\n    this._graph     = context.graph;\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      this._inversePredicate = context.inverse;\n      this._prefixes._ = context.blankPrefix;\n      this._quantified = context.quantified;\n    }\n  }\n\n  // ### `_readInTopContext` reads a token when in the top context\n  _readInTopContext(token) {\n    switch (token.type) {\n    // If an EOF token arrives in the top context, signal that we're done\n    case 'eof':\n      if (this._graph !== null)\n        return this._error('Unclosed graph', token);\n      delete this._prefixes._;\n      return this._callback(null, null, this._prefixes);\n    // It could be a prefix declaration\n    case 'PREFIX':\n      this._sparqlStyle = true;\n    case '@prefix':\n      return this._readPrefix;\n    // It could be a base declaration\n    case 'BASE':\n      this._sparqlStyle = true;\n    case '@base':\n      return this._readBaseIRI;\n    // It could be a graph\n    case '{':\n      if (this._supportsNamedGraphs) {\n        this._graph = '';\n        this._subject = null;\n        return this._readSubject;\n      }\n    case 'GRAPH':\n      if (this._supportsNamedGraphs)\n        return this._readNamedGraphLabel;\n    // Otherwise, the next token must be a subject\n    default:\n      return this._readSubject(token);\n    }\n  }\n\n  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable\n  _readEntity(token, quantifier) {\n    let value;\n    switch (token.type) {\n    // Read a relative or absolute IRI\n    case 'IRI':\n    case 'typeIRI':\n      const iri = this._resolveIRI(token.value);\n      if (iri === null)\n        return this._error('Invalid IRI', token);\n      value = this._namedNode(iri);\n      break;\n    // Read a prefixed name\n    case 'type':\n    case 'prefixed':\n      const prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error(`Undefined prefix \"${token.prefix}:\"`, token);\n      value = this._namedNode(prefix + token.value);\n      break;\n    // Read a blank node\n    case 'blank':\n      value = this._blankNode(this._prefixes[token.prefix] + token.value);\n      break;\n    // Read a variable\n    case 'var':\n      value = this._variable(token.value.substr(1));\n      break;\n    // Everything else is not an entity\n    default:\n      return this._error(`Expected entity but got ${token.type}`, token);\n    }\n    // In N3 mode, replace the entity if it is quantified\n    if (!quantifier && this._n3Mode && (value.id in this._quantified))\n      value = this._quantified[value.id];\n    return value;\n  }\n\n  // ### `_readSubject` reads a quad's subject\n  _readSubject(token) {\n    this._predicate = null;\n    switch (token.type) {\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph,\n                        this._subject = this._blankNode(), null, null);\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this.RDF_NIL, null, null);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph,\n                        this._graph = this._blankNode(), null, null);\n      return this._readSubject;\n    case '}':\n       // No subject; the graph in which we are reading is closed instead\n      return this._readPunctuation(token);\n    case '@forSome':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forSome\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORSOME;\n      this._quantifier = this._blankNode;\n      return this._readQuantifierList;\n    case '@forAll':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forAll\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORALL;\n      this._quantifier = this._variable;\n      return this._readQuantifierList;\n    case 'literal':\n      if (!this._n3Mode)\n        return this._error('Unexpected literal', token);\n\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._completeSubjectLiteral;\n      }\n      else\n        this._subject = this._literal(token.value, this._namedNode(token.prefix));\n\n      break;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, null, null, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the subject entity\n      if ((this._subject = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the subject might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._readPredicateOrNamedGraph);\n    }\n\n    // The next token must be a predicate,\n    // or, if the subject was actually a graph IRI, a named graph\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // ### `_readPredicate` reads a quad's predicate\n  _readPredicate(token) {\n    const type = token.type;\n    switch (type) {\n    case 'inverse':\n      this._inversePredicate = true;\n    case 'abbreviation':\n      this._predicate = this.ABBREVIATIONS[token.value];\n      break;\n    case '.':\n    case ']':\n    case '}':\n      // Expected predicate didn't come, must have been trailing semicolon\n      if (this._predicate === null)\n        return this._error(`Unexpected ${type}`, token);\n      this._subject = null;\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\n    case ';':\n      // Additional semicolons can be safely ignored\n      return this._predicate !== null ? this._readPredicate :\n             this._error('Expected predicate but got ;', token);\n    case 'blank':\n      if (!this._n3Mode)\n        return this._error('Disallowed blank node as predicate', token);\n    default:\n      if ((this._predicate = this._readEntity(token)) === undefined)\n        return;\n    }\n    // The next token must be an object\n    return this._readObject;\n  }\n\n  // ### `_readObject` reads a quad's object\n  _readObject(token) {\n    switch (token.type) {\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._readDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else\n        this._object = this._literal(token.value, this._namedNode(token.prefix));\n      break;\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph, this._subject, this._predicate,\n                        this._subject = this._blankNode());\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, this._subject, this._predicate, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the object entity\n      if ((this._object = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the object might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._getContextEndReader());\n    }\n    return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph\n  _readPredicateOrNamedGraph(token) {\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\n  }\n\n  // ### `_readGraph` reads a graph\n  _readGraph(token) {\n    if (token.type !== '{')\n      return this._error(`Expected graph but got ${token.type}`, token);\n    // The \"subject\" we read is actually the GRAPH's label\n    this._graph = this._subject, this._subject = null;\n    return this._readSubject;\n  }\n\n  // ### `_readBlankNodeHead` reads the head of a blank node\n  _readBlankNodeHead(token) {\n    if (token.type === ']') {\n      this._subject = null;\n      return this._readBlankNodeTail(token);\n    }\n    else {\n      this._predicate = null;\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readBlankNodeTail` reads the end of a blank node\n  _readBlankNodeTail(token) {\n    if (token.type !== ']')\n      return this._readBlankNodePunctuation(token);\n\n    // Store blank node quad\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this blank node\n    const empty = this._predicate === null;\n    this._restoreContext();\n    // If the blank node was the subject, continue reading the predicate\n    if (this._object === null)\n      // If the blank node was empty, it could be a named graph label\n      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;\n    // If the blank node was the object, restore previous context and read punctuation\n    else\n      return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node\n  _readPredicateAfterBlank(token) {\n    switch (token.type) {\n    case '.':\n    case '}':\n      // No predicate is coming if the triple is terminated here\n      this._subject = null;\n      return this._readPunctuation(token);\n    default:\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readListItem` reads items from a list\n  _readListItem(token) {\n    let item = null,                      // The item of the list\n        list = null,                      // The list itself\n        next = this._readListItem;        // The next function to execute\n    const previousList = this._subject,   // The previous list that contains this list\n        stack = this._contextStack,       // The stack of parent contexts\n        parent = stack[stack.length - 1]; // The parent containing the current list\n\n    switch (token.type) {\n    case '[':\n      // Stack the current list quad and start a new quad with a blank node as subject\n      this._saveContext('blank', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST,\n                        this._subject = item = this._blankNode());\n      next = this._readBlankNodeHead;\n      break;\n    case '(':\n      // Stack the current list quad and start a new list\n      this._saveContext('list', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);\n      this._subject = null;\n      break;\n    case ')':\n      // Closing the list; restore the parent context\n      this._restoreContext();\n      // If this list is contained within a parent list, return the membership quad here.\n      // This will be `<parent list element> rdf:first <this list>.`.\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\n        this._emit(this._subject, this._predicate, this._object, this._graph);\n      // Was this list the parent's subject?\n      if (this._predicate === null) {\n        // The next token is the predicate\n        next = this._readPredicate;\n        // No list tail if this was an empty list\n        if (this._subject === this.RDF_NIL)\n          return next;\n      }\n      // The list was in the parent context's object\n      else {\n        next = this._getContextEndReader();\n        // No list tail if this was an empty list\n        if (this._object === this.RDF_NIL)\n          return next;\n      }\n      // Close the list by making the head nil\n      list = this.RDF_NIL;\n      break;\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        next = this._readListItemDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else {\n        item = this._literal(token.value, this._namedNode(token.prefix));\n        next = this._getContextEndReader();\n      }\n      break;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    default:\n      if ((item = this._readEntity(token)) === undefined)\n        return;\n    }\n\n     // Create a new blank node if no item head was assigned yet\n    if (list === null)\n      this._subject = list = this._blankNode();\n\n    // Is this the first element of the list?\n    if (previousList === null) {\n      // This list is either the subject or the object of its parent\n      if (parent.predicate === null)\n        parent.subject = list;\n      else\n        parent.object = list;\n    }\n    else {\n      // Continue the previous list with the current list\n      this._emit(previousList, this.RDF_REST, list, this._graph);\n    }\n    // If an item was read, add it to the list\n    if (item !== null) {\n      // In N3 mode, the item might be a path\n      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {\n        // Create a new context to add the item's path\n        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);\n        this._subject = item, this._predicate = null;\n        // _readPath will restore the context and output the item\n        return this._getPathReader(this._readListItem);\n      }\n      // Output the item\n      this._emit(list, this.RDF_FIRST, item, this._graph);\n    }\n    return next;\n  }\n\n  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language\n  _readDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, false);\n  }\n\n\n  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list\n  _readListItemDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, true);\n  }\n\n  // ### `_completeLiteral` completes a literal with an optional datatype or language\n  _completeLiteral(token) {\n    // Create a simple string literal by default\n    let literal = this._literal(this._literalValue);\n\n    switch (token.type) {\n    // Create a datatyped literal\n    case 'type':\n    case 'typeIRI':\n      const datatype = this._readEntity(token);\n      if (datatype === undefined) return; // No datatype means an error occurred\n      literal = this._literal(this._literalValue, datatype);\n      token = null;\n      break;\n    // Create a language-tagged string\n    case 'langcode':\n      literal = this._literal(this._literalValue, token.value);\n      token = null;\n      break;\n    }\n\n    return { token, literal };\n  }\n\n  // Completes a literal in subject position\n  _completeSubjectLiteral(token) {\n    this._subject = this._completeLiteral(token).literal;\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // Completes a literal in object position\n  _completeObjectLiteral(token, listItem) {\n    const completed = this._completeLiteral(token);\n    if (!completed)\n      return;\n    this._object = completed.literal;\n\n    // If this literal was part of a list, write the item\n    // (we could also check the context stack, but passing in a flag is faster)\n    if (listItem)\n      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);\n    // If the token was consumed, continue with the rest of the input\n    if (completed.token === null)\n      return this._getContextEndReader();\n    // Otherwise, consume the token now\n    else {\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(completed.token);\n    }\n  }\n\n  // ### `_readFormulaTail` reads the end of a formula\n  _readFormulaTail(token) {\n    if (token.type !== '}')\n      return this._readPunctuation(token);\n\n    // Store the last quad of the formula\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this formula\n    this._restoreContext();\n    // If the formula was the subject, continue reading the predicate.\n    // If the formula was the object, read punctuation.\n    return this._object === null ? this._readPredicate : this._getContextEndReader();\n  }\n\n  // ### `_readPunctuation` reads punctuation between quads or quad parts\n  _readPunctuation(token) {\n    let next, graph = this._graph;\n    const subject = this._subject, inversePredicate = this._inversePredicate;\n    switch (token.type) {\n    // A closing brace ends a graph\n    case '}':\n      if (this._graph === null)\n        return this._error('Unexpected graph closing', token);\n      if (this._n3Mode)\n        return this._readFormulaTail(token);\n      this._graph = null;\n    // A dot just ends the statement, without sharing anything with the next\n    case '.':\n      this._subject = null;\n      next = this._contextStack.length ? this._readSubject : this._readInTopContext;\n      if (inversePredicate) this._inversePredicate = false;\n      break;\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {\n        next = this._readQuadPunctuation;\n        break;\n      }\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    if (subject !== null) {\n      const predicate = this._predicate, object = this._object;\n      if (!inversePredicate)\n        this._emit(subject, predicate, object,  graph);\n      else\n        this._emit(object,  predicate, subject, graph);\n    }\n    return next;\n  }\n\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\n  _readBlankNodePunctuation(token) {\n    let next;\n    switch (token.type) {\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    this._emit(this._subject, this._predicate, this._object, this._graph);\n    return next;\n  }\n\n  // ### `_readQuadPunctuation` reads punctuation after a quad\n  _readQuadPunctuation(token) {\n    if (token.type !== '.')\n      return this._error('Expected dot to follow quad', token);\n    return this._readInTopContext;\n  }\n\n  // ### `_readPrefix` reads the prefix of a prefix declaration\n  _readPrefix(token) {\n    if (token.type !== 'prefix')\n      return this._error('Expected prefix to follow @prefix', token);\n    this._prefix = token.value;\n    return this._readPrefixIRI;\n  }\n\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration\n  _readPrefixIRI(token) {\n    if (token.type !== 'IRI')\n      return this._error(`Expected IRI to follow prefix \"${this._prefix}:\"`, token);\n    const prefixNode = this._readEntity(token);\n    this._prefixes[this._prefix] = prefixNode.value;\n    this._prefixCallback(this._prefix, prefixNode);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readBaseIRI` reads the IRI of a base declaration\n  _readBaseIRI(token) {\n    const iri = token.type === 'IRI' && this._resolveIRI(token.value);\n    if (!iri)\n      return this._error('Expected valid IRI to follow base declaration', token);\n    this._setBase(iri);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readNamedGraphLabel` reads the label of a named graph\n  _readNamedGraphLabel(token) {\n    switch (token.type) {\n    case 'IRI':\n    case 'blank':\n    case 'prefixed':\n      return this._readSubject(token), this._readGraph;\n    case '[':\n      return this._readNamedGraphBlankLabel;\n    default:\n      return this._error('Invalid graph label', token);\n    }\n  }\n\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph\n  _readNamedGraphBlankLabel(token) {\n    if (token.type !== ']')\n      return this._error('Invalid graph label', token);\n    this._subject = this._blankNode();\n    return this._readGraph;\n  }\n\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration\n  _readDeclarationPunctuation(token) {\n    // SPARQL-style declarations don't have punctuation\n    if (this._sparqlStyle) {\n      this._sparqlStyle = false;\n      return this._readInTopContext(token);\n    }\n\n    if (token.type !== '.')\n      return this._error('Expected declaration to end with a dot', token);\n    return this._readInTopContext;\n  }\n\n  // Reads a list of quantified symbols from a @forSome or @forAll statement\n  _readQuantifierList(token) {\n    let entity;\n    switch (token.type) {\n    case 'IRI':\n    case 'prefixed':\n      if ((entity = this._readEntity(token, true)) !== undefined)\n        break;\n    default:\n      return this._error(`Unexpected ${token.type}`, token);\n    }\n    // Without explicit quantifiers, map entities to a quantified entity\n    if (!this._explicitQuantifiers)\n      this._quantified[entity.id] = this._quantifier(this._blankNode().value);\n    // With explicit quantifiers, output the reified quantifier\n    else {\n      // If this is the first item, start a new quantifier list\n      if (this._subject === null)\n        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Otherwise, continue the previous list\n      else\n        this._emit(this._subject, this.RDF_REST,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Output the list item\n      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);\n    }\n    return this._readQuantifierPunctuation;\n  }\n\n  // Reads punctuation from a @forSome or @forAll statement\n  _readQuantifierPunctuation(token) {\n    // Read more quantifiers\n    if (token.type === ',')\n      return this._readQuantifierList;\n    // End of the quantifier list\n    else {\n      // With explicit quantifiers, close the quantifier list\n      if (this._explicitQuantifiers) {\n        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);\n        this._subject = null;\n      }\n      // Read a dot\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(token);\n    }\n  }\n\n  // ### `_getPathReader` reads a potential path and then resumes with the given function\n  _getPathReader(afterPath) {\n    this._afterPath = afterPath;\n    return this._readPath;\n  }\n\n  // ### `_readPath` reads a potential path\n  _readPath(token) {\n    switch (token.type) {\n    // Forward path\n    case '!': return this._readForwardPath;\n    // Backward path\n    case '^': return this._readBackwardPath;\n    // Not a path; resume reading where we left off\n    default:\n      const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];\n      // If we were reading a list item, we still need to output it\n      if (parent && parent.type === 'item') {\n        // The list item is the remaining subejct after reading the path\n        const item = this._subject;\n        // Switch back to the context of the list\n        this._restoreContext();\n        // Output the list item\n        this._emit(this._subject, this.RDF_FIRST, item, this._graph);\n      }\n      return this._afterPath(token);\n    }\n  }\n\n  // ### `_readForwardPath` reads a '!' path\n  _readForwardPath(token) {\n    let subject, predicate;\n    const object = this._blankNode();\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's object\n    if (this._predicate === null)\n      subject = this._subject, this._subject = object;\n    // If we were reading an object, replace the subject by the path's object\n    else\n      subject = this._object,  this._object  = object;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readBackwardPath` reads a '^' path\n  _readBackwardPath(token) {\n    const subject = this._blankNode();\n    let predicate, object;\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's subject\n    if (this._predicate === null)\n      object = this._subject, this._subject = subject;\n    // If we were reading an object, replace the subject by the path's subject\n    else\n      object = this._object,  this._object  = subject;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple\n  _readRDFStarTailOrGraph(token) {\n    if (token.type !== '>>') {\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined)\n        return this._readRDFStarTail;\n      return this._error(`Expected >> to follow \"${this._object.id}\"`, token);\n    }\n    return this._readRDFStarTail(token);\n  }\n\n  // ### `_readRDFStarTail` reads the end of a nested RDF* triple\n  _readRDFStarTail(token) {\n    if (token.type !== '>>')\n      return this._error(`Expected >> but got ${token.type}`, token);\n    // Read the quad and restore the previous context\n    const quad = this._quad(this._subject, this._predicate, this._object,\n      this._graph || this.DEFAULTGRAPH);\n    this._restoreContext();\n    // If the triple was the subject, continue by reading the predicate.\n    if (this._subject === null) {\n      this._subject = quad;\n      return this._readPredicate;\n    }\n    // If the triple was the object, read context end.\n    else {\n      this._object = quad;\n      return this._getContextEndReader();\n    }\n  }\n\n  // ### `_getContextEndReader` gets the next reader function at the end of a context\n  _getContextEndReader() {\n    const contextStack = this._contextStack;\n    if (!contextStack.length)\n      return this._readPunctuation;\n\n    switch (contextStack[contextStack.length - 1].type) {\n    case 'blank':\n      return this._readBlankNodeTail;\n    case 'list':\n      return this._readListItem;\n    case 'formula':\n      return this._readFormulaTail;\n    case '<<':\n      return this._readRDFStarTailOrGraph;\n    }\n  }\n\n  // ### `_emit` sends a quad through the callback\n  _emit(subject, predicate, object, graph) {\n    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));\n  }\n\n  // ### `_error` emits an error message through the callback\n  _error(message, token) {\n    const err = new Error(`${message} on line ${token.line}.`);\n    err.context = {\n      token: token,\n      line: token.line,\n      previousToken: this._lexer.previousToken,\n    };\n    this._callback(err);\n    this._callback = noop;\n  }\n\n  // ### `_resolveIRI` resolves an IRI against the base path\n  _resolveIRI(iri) {\n    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);\n  }\n\n  // ### `_resolveRelativeIRI` resolves an IRI against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative\n  _resolveRelativeIRI(iri) {\n    // An empty relative IRI indicates the base IRI\n    if (!iri.length)\n      return this._base;\n    // Decide resolving strategy based in the first character\n    switch (iri[0]) {\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return this._base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default:\n      // Relative IRIs cannot contain a colon in the first path segment\n      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);\n    }\n  }\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986\n  _removeDotSegments(iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!/(^|\\/)\\.\\.?($|[/#?])/.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    const length = iri.length;\n    let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return `${result}/${iri.substr(i + 1)}`;\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  }\n\n  // ## Public methods\n\n  // ### `parse` parses the N3 input and emits each parsed quad through the callback\n  parse(input, quadCallback, prefixCallback) {\n    // The read callback is the next function to be executed when a token arrives.\n    // We start reading in the top context.\n    this._readCallback = this._readInTopContext;\n    this._sparqlStyle = false;\n    this._prefixes = Object.create(null);\n    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)\n                                             : `b${blankNodePrefix++}_`;\n    this._prefixCallback = prefixCallback || noop;\n    this._inversePredicate = false;\n    this._quantified = Object.create(null);\n\n    // Parse synchronously if no quad callback is given\n    if (!quadCallback) {\n      const quads = [];\n      let error;\n      this._callback = (e, t) => { e ? (error = e) : t && quads.push(t); };\n      this._lexer.tokenize(input).every(token => {\n        return this._readCallback = this._readCallback(token);\n      });\n      if (error) throw error;\n      return quads;\n    }\n\n    // Parse asynchronously otherwise, executing the read callback when a token arrives\n    this._callback = quadCallback;\n    this._lexer.tokenize(input, (error, token) => {\n      if (error !== null)\n        this._callback(error), this._callback = noop;\n      else if (this._readCallback)\n        this._readCallback = this._readCallback(token);\n    });\n  }\n}\n\n// The empty function\nfunction noop() {}\n\n// Initializes the parser with the given data factory\nfunction initDataFactory(parser, factory) {\n  // Set factory methods\n  const namedNode = factory.namedNode;\n  parser._namedNode   = namedNode;\n  parser._blankNode   = factory.blankNode;\n  parser._literal     = factory.literal;\n  parser._variable    = factory.variable;\n  parser._quad        = factory.quad;\n  parser.DEFAULTGRAPH = factory.defaultGraph();\n\n  // Set common named nodes\n  parser.RDF_FIRST  = namedNode(namespaces.rdf.first);\n  parser.RDF_REST   = namedNode(namespaces.rdf.rest);\n  parser.RDF_NIL    = namedNode(namespaces.rdf.nil);\n  parser.N3_FORALL  = namedNode(namespaces.r.forAll);\n  parser.N3_FORSOME = namedNode(namespaces.r.forSome);\n  parser.ABBREVIATIONS = {\n    'a': namedNode(namespaces.rdf.type),\n    '=': namedNode(namespaces.owl.sameAs),\n    '>': namedNode(namespaces.log.implies),\n  };\n  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');\n}\ninitDataFactory(N3Parser.prototype, N3DataFactory);\n","// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._baseIRI = options.baseIRI;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(t => {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }).join('');\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseIRI && iri.startsWith(this._baseIRI))\n      iri = iri.substr(this._baseIRI.length);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF* quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = IRIlist.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n","// **N3Store** objects store N3 quads by graph in memory.\nimport { default as N3DataFactory, termToId, termFromId } from './N3DataFactory';\nimport { Readable } from 'readable-stream';\nimport namespaces from './IRIs';\n\n// ## Constructor\nexport default class N3Store {\n  constructor(quads, options) {\n    // The number of quads is initially zero\n    this._size = 0;\n    // `_graphs` contains subject, predicate, and object indexes per graph\n    this._graphs = Object.create(null);\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\n    // saving memory by using only numbers as keys in `_graphs`\n    this._id = 0;\n    this._ids = Object.create(null);\n    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero\n    this._entities = Object.create(null); // inverse of `_ids`\n    // `_blankNodeIndex` is the index of the last automatically named blank node\n    this._blankNodeIndex = 0;\n\n    // Shift parameters if `quads` is not given\n    if (!options && quads && !quads[0])\n      options = quads, quads = null;\n    options = options || {};\n    this._factory = options.factory || N3DataFactory;\n\n    // Add quads if passed\n    if (quads)\n      this.addQuads(quads);\n  }\n\n  // ## Public properties\n\n  // ### `size` returns the number of quads in the store\n  get size() {\n    // Return the quad count if if was cached\n    let size = this._size;\n    if (size !== null)\n      return size;\n\n    // Calculate the number of quads by counting to the deepest level\n    size = 0;\n    const graphs = this._graphs;\n    let subjects, subject;\n    for (const graphKey in graphs)\n      for (const subjectKey in (subjects = graphs[graphKey].subjects))\n        for (const predicateKey in (subject = subjects[subjectKey]))\n          size += Object.keys(subject[predicateKey]).length;\n    return this._size = size;\n  }\n\n  // ## Private methods\n\n  // ### `_addToIndex` adds a quad to a three-layered index.\n  // Returns if the index has changed, if the entry did not already exist.\n  _addToIndex(index0, key0, key1, key2) {\n    // Create layers as necessary\n    const index1 = index0[key0] || (index0[key0] = {});\n    const index2 = index1[key1] || (index1[key1] = {});\n    // Setting the key to _any_ value signals the presence of the quad\n    const existed = key2 in index2;\n    if (!existed)\n      index2[key2] = null;\n    return !existed;\n  }\n\n  // ### `_removeFromIndex` removes a quad from a three-layered index\n  _removeFromIndex(index0, key0, key1, key2) {\n    // Remove the quad from the index\n    const index1 = index0[key0], index2 = index1[key1];\n    delete index2[key2];\n\n    // Remove intermediary index layers if they are empty\n    for (const key in index2) return;\n    delete index1[key1];\n    for (const key in index1) return;\n    delete index0[key0];\n  }\n\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\n  // used when reconstructing the resulting quad\n  // (for instance: _subject_, _predicate_, and _object_).\n  // Finally, `graph` will be the graph of the created quads.\n  // If `callback` is given, each result is passed through it\n  // and iteration halts when it returns truthy for any quad.\n  // If instead `array` is given, each result is added to the array.\n  _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {\n    let tmp, index1, index2;\n    // Depending on the number of variables, keys or reverse index are faster\n    const varCount = !key0 + !key1 + !key2,\n        entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;\n\n    // If a key is specified, use only that part of index 0.\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      const entity0 = entityKeys[value0];\n\n      if (index1 = index0[value0]) {\n        // If a key is specified, use only that part of index 1.\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          const entity1 = entityKeys[value1];\n\n          if (index2 = index1[value1]) {\n            // If a key is specified, use only that part of index 2, if it exists.\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\n            // Create quads for all items found in index 2.\n            for (let l = 0; l < values.length; l++) {\n              const parts = { subject: null, predicate: null, object: null };\n              parts[name0] = termFromId(entity0, this._factory);\n              parts[name1] = termFromId(entity1, this._factory);\n              parts[name2] = termFromId(entityKeys[values[l]], this._factory);\n              const quad = this._factory.quad(\n                parts.subject, parts.predicate, parts.object, termFromId(graph, this._factory));\n              if (array)\n                array.push(quad);\n              else if (callback(quad))\n                return true;\n            }\n          }\n        }\n      }\n    }\n    return array;\n  }\n\n  // ### `_loop` executes the callback on all keys of index 0\n  _loop(index0, callback) {\n    for (const key0 in index0)\n      callback(key0);\n  }\n\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\n  _loopByKey0(index0, key0, callback) {\n    let index1, key1;\n    if (index1 = index0[key0]) {\n      for (key1 in index1)\n        callback(key1);\n    }\n  }\n\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\n  _loopByKey1(index0, key1, callback) {\n    let key0, index1;\n    for (key0 in index0) {\n      index1 = index0[key0];\n      if (index1[key1])\n        callback(key0);\n    }\n  }\n\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\n  _loopBy2Keys(index0, key0, key1, callback) {\n    let index1, index2, key2;\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\n      for (key2 in index2)\n        callback(key2);\n    }\n  }\n\n  // ### `_countInIndex` counts matching quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  _countInIndex(index0, key0, key1, key2) {\n    let count = 0, tmp, index1, index2;\n\n    // If a key is specified, count only that part of index 0\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        // If a key is specified, count only that part of index 1\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            // If a key is specified, count the quad if it exists\n            if (key2) (key2 in index2) && count++;\n            // Otherwise, count all quads\n            else count += Object.keys(index2).length;\n          }\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `_getGraphs` returns an array with the given graph,\n  // or all graphs if the argument is null or undefined.\n  _getGraphs(graph) {\n    if (!isString(graph))\n      return this._graphs;\n    const graphs = {};\n    graphs[graph] = this._graphs[graph];\n    return graphs;\n  }\n\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\n  // and passes the corresponding entity to callback if it hasn't occurred before.\n  _uniqueEntities(callback) {\n    const uniqueIds = Object.create(null);\n    return id => {\n      if (!(id in uniqueIds)) {\n        uniqueIds[id] = true;\n        callback(termFromId(this._entities[id], this._factory));\n      }\n    };\n  }\n\n  // ## Public methods\n\n  // ### `add` adds the specified quad to the dataset.\n  // Returns the dataset instance it was called on.\n  // Existing quads, as defined in Quad.equals, will be ignored.\n  add(quad) {\n    this.addQuad(quad);\n    return this;\n  }\n\n  // ### `addQuad` adds a new quad to the store.\n  // Returns if the quad index has changed, if the quad did not already exist.\n  addQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find the graph that will contain the triple\n    let graphItem = this._graphs[graph];\n    // Create the graph if it doesn't exist yet\n    if (!graphItem) {\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\n      // Freezing a graph helps subsequent `add` performance,\n      // and properties will never be modified anyway\n      Object.freeze(graphItem);\n    }\n\n    // Since entities can often be long IRIs, we avoid storing them in every index.\n    // Instead, we have a separate index that maps entities to numbers,\n    // which are then used as keys in the other indexes.\n    const ids = this._ids;\n    const entities = this._entities;\n    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);\n    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);\n    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);\n\n    const changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\n\n    // The cached quad count is now invalid\n    this._size = null;\n    return changed;\n  }\n\n  // ### `addQuads` adds multiple quads to the store\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `delete` removes the specified quad from the dataset.\n  // Returns the dataset instance it was called on.\n  delete(quad) {\n    this.removeQuad(quad);\n    return this;\n  }\n\n  // ### `has` determines whether a dataset includes a certain quad.\n  // Returns true or false as appropriate.\n  has(quad) {\n    const quads = this.getQuads(quad.subject, quad.predicate, quad.object, quad.graph);\n    return quads.length !== 0;\n  }\n\n  // ### `import` adds a stream of quads to the store\n  import(stream) {\n    stream.on('data', quad => { this.addQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeQuad` removes a quad from the store if it exists\n  removeQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find internal identifiers for all components\n    // and verify the quad exists.\n    const ids = this._ids, graphs = this._graphs;\n    let graphItem, subjects, predicates;\n    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||\n        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||\n        !(subjects   = graphItem.subjects[subject]) ||\n        !(predicates = subjects[predicate]) ||\n        !(object in predicates))\n      return false;\n\n    // Remove it from all indexes\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\n    if (this._size !== null) this._size--;\n\n    // Remove the graph if it is empty\n    for (subject in graphItem.subjects) return true;\n    delete graphs[graph];\n    return true;\n  }\n\n  // ### `removeQuads` removes multiple quads from the store\n  removeQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.removeQuad(quads[i]);\n  }\n\n  // ### `remove` removes a stream of quads from the store\n  remove(stream) {\n    stream.on('data', quad => { this.removeQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeMatches` removes all matching quads from the store\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  removeMatches(subject, predicate, object, graph) {\n    const stream = new Readable({ objectMode: true });\n\n    stream._read = () => {\n      for (const quad of this.getQuads(subject, predicate, object, graph))\n        stream.push(quad);\n      stream.push(null);\n    };\n\n    return this.remove(stream);\n  }\n\n  // ### `deleteGraph` removes all triples with the given graph from the store\n  deleteGraph(graph) {\n    return this.removeMatches(null, null, null, graph);\n  }\n\n  // ### `getQuads` returns an array of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const quads = [], graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return quads;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the object index will be the fastest\n            this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                              'object', 'subject', 'predicate', graphId, null, quads);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            this._findInIndex(content.subjects, subjectId, predicateId, null,\n                              'subject', 'predicate', 'object', graphId, null, quads);\n        }\n        else if (predicateId)\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          this._findInIndex(content.predicates, predicateId, objectId, null,\n                            'predicate', 'object', 'subject', graphId, null, quads);\n        else if (objectId)\n          // If only object is given, the object index will be the fastest\n          this._findInIndex(content.objects, objectId, null, null,\n                            'object', 'subject', 'predicate', graphId, null, quads);\n        else\n          // If nothing is given, iterate subjects and predicates first\n          this._findInIndex(content.subjects, null, null, null,\n                            'subject', 'predicate', 'object', graphId, null, quads);\n      }\n    }\n    return quads;\n  }\n\n  // ### `match` returns a new dataset that is comprised of all quads in the current instance matching the given arguments.\n  // The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.\n  // Note: This method always returns a new DatasetCore, even if that dataset contains no quads.\n  // Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  // For backwards compatibility, the object return also implements the Readable stream interface.\n  match(subject, predicate, object, graph) {\n    return new DatasetCoreAndReadableStream(this, subject, predicate, object, graph);\n  }\n\n  // ### `countQuads` returns the number of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  countQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let count = 0, content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return 0;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subject) {\n          if (object)\n            // If subject and object are given, the object index will be the fastest\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\n        }\n        else if (predicate) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\n        }\n        else {\n          // If only object is possibly given, the object index will be the fastest\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `forEach` executes the callback on all quads.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forEach(callback, subject, predicate, object, graph) {\n    this.some(quad => {\n      callback(quad);\n      return false;\n    }, subject, predicate, object, graph);\n  }\n\n  // ### `every` executes the callback on all quads,\n  // and returns `true` if it returns truthy for all them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  every(callback, subject, predicate, object, graph) {\n    let some = false;\n    const every = !this.some(quad => {\n      some = true;\n      return !callback(quad);\n    }, subject, predicate, object, graph);\n    return some && every;\n  }\n\n  // ### `some` executes the callback on all quads,\n  // and returns `true` if it returns truthy for any of them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  some(callback, subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return false;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId) {\n          // If subject and object are given, the object index will be the fastest\n            if (this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                                  'object', 'subject', 'predicate', graphId, callback, null))\n              return true;\n          }\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            if (this._findInIndex(content.subjects, subjectId, predicateId, null,\n                                  'subject', 'predicate', 'object', graphId, callback, null))\n              return true;\n        }\n        else if (predicateId) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          if (this._findInIndex(content.predicates, predicateId, objectId, null,\n                                'predicate', 'object', 'subject', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else if (objectId) {\n          // If only object is given, the object index will be the fastest\n          if (this._findInIndex(content.objects, objectId, null, null,\n                                'object', 'subject', 'predicate', graphId, callback, null)) {\n            return true;\n          }\n        }\n        else\n        // If nothing is given, iterate subjects and predicates first\n        if (this._findInIndex(content.subjects, null, null, null,\n                              'subject', 'predicate', 'object', graphId, callback, null)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // ### `getSubjects` returns all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getSubjects(predicate, object, graph) {\n    const results = [];\n    this.forSubjects(s => { results.push(s); }, predicate, object, graph);\n    return results;\n  }\n\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forSubjects(callback, predicate, object, graph) {\n    // Convert terms to internal string representation\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, predicateId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (predicateId) {\n          if (objectId)\n            // If predicate and object are given, the POS index is best.\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\n          else\n            // If only predicate is given, the SPO index is best.\n            this._loopByKey1(content.subjects, predicateId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the OSP index is best.\n          this._loopByKey0(content.objects, objectId, callback);\n        else\n          // If no params given, iterate all the subjects\n          this._loop(content.subjects, callback);\n      }\n    }\n  }\n\n  // ### `getPredicates` returns all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getPredicates(subject, object, graph) {\n    const results = [];\n    this.forPredicates(p => { results.push(p); }, subject, object, graph);\n    return results;\n  }\n\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forPredicates(callback, subject, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject) && !(subjectId = ids[subject]) ||\n        isString(object)  && !(objectId  = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the OSP index is best.\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\n          else\n            // If only subject is given, the SPO index is best.\n            this._loopByKey0(content.subjects, subjectId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the POS index is best.\n          this._loopByKey1(content.predicates, objectId, callback);\n        else\n          // If no params given, iterate all the predicates.\n          this._loop(content.predicates, callback);\n      }\n    }\n  }\n\n  // ### `getObjects` returns all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getObjects(subject, predicate, graph) {\n    const results = [];\n    this.forObjects(o => { results.push(o); }, subject, predicate, graph);\n    return results;\n  }\n\n  // ### `forObjects` executes the callback on all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forObjects(callback, subject, predicate, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, predicateId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject]) ||\n        isString(predicate) && !(predicateId = ids[predicate]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (predicateId)\n            // If subject and predicate are given, the SPO index is best.\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\n          else\n            // If only subject is given, the OSP index is best.\n            this._loopByKey1(content.objects, subjectId, callback);\n        }\n        else if (predicateId)\n          // If only predicate is given, the POS index is best.\n          this._loopByKey0(content.predicates, predicateId, callback);\n        else\n          // If no params given, iterate all the objects.\n          this._loop(content.objects, callback);\n      }\n    }\n  }\n\n  // ### `getGraphs` returns all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getGraphs(subject, predicate, object) {\n    const results = [];\n    this.forGraphs(g => { results.push(g); }, subject, predicate, object);\n    return results;\n  }\n\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forGraphs(callback, subject, predicate, object) {\n    for (const graph in this._graphs) {\n      this.some(quad => {\n        callback(quad.graph);\n        return true; // Halt iteration of some()\n      }, subject, predicate, object, graph);\n    }\n  }\n\n  // ### `createBlankNode` creates a new blank node, returning its name\n  createBlankNode(suggestedName) {\n    let name, index;\n    // Generate a name based on the suggested name\n    if (suggestedName) {\n      name = suggestedName = `_:${suggestedName}`, index = 1;\n      while (this._ids[name])\n        name = suggestedName + index++;\n    }\n    // Generate a generic blank node name\n    else {\n      do { name = `_:b${this._blankNodeIndex++}`; }\n      while (this._ids[name]);\n    }\n    // Add the blank node to the entities, avoiding the generation of duplicates\n    this._ids[name] = ++this._id;\n    this._entities[this._id] = name;\n    return this._factory.blankNode(name.substr(2));\n  }\n\n  // ### `extractLists` finds and removes all list triples\n  // and returns the items per list.\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\n    const lists = {}; // has scalar keys so could be a simple Object\n    const onError = ignoreErrors ? (() => true) :\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\n\n    // Traverse each list from its tail\n    const tails = this.getQuads(null, namespaces.rdf.rest, namespaces.rdf.nil, null);\n    const toRemove = remove ? [...tails] : [];\n    tails.forEach(tailQuad => {\n      const items = [];             // the members found as objects of rdf:first quads\n      let malformed = false;      // signals whether the current list is malformed\n      let head;                   // the head of the list (_:b1 in above example)\n      let headPos;                // set to subject or object when head is set\n      const graph = tailQuad.graph; // make sure list is in exactly one graph\n\n      // Traverse the list from tail to end\n      let current = tailQuad.subject;\n      while (current && !malformed) {\n        const objectQuads = this.getQuads(null, null, current, null);\n        const subjectQuads = this.getQuads(current, null, null, null);\n        let quad, first = null, rest = null, parent = null;\n\n        // Find the first and rest of this list node\n        for (let i = 0; i < subjectQuads.length && !malformed; i++) {\n          quad = subjectQuads[i];\n          if (!quad.graph.equals(graph))\n            malformed = onError(current, 'not confined to single graph');\n          else if (head)\n            malformed = onError(current, 'has non-list arcs out');\n\n          // one rdf:first\n          else if (quad.predicate.value === namespaces.rdf.first) {\n            if (first)\n              malformed = onError(current, 'has multiple rdf:first arcs');\n            else\n              toRemove.push(first = quad);\n          }\n\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (rest)\n              malformed = onError(current, 'has multiple rdf:rest arcs');\n            else\n              toRemove.push(rest = quad);\n          }\n\n          // alien triple\n          else if (objectQuads.length)\n            malformed = onError(current, 'can\\'t be subject and object');\n          else {\n            head = quad; // e.g. { (1 2 3) :p :o }\n            headPos = 'subject';\n          }\n        }\n\n        // { :s :p (1 2) } arrives here with no head\n        // { (1 2) :p :o } arrives here with head set to the list.\n        for (let i = 0; i < objectQuads.length && !malformed; ++i) {\n          quad = objectQuads[i];\n          if (head)\n            malformed = onError(current, 'can\\'t have coreferences');\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (parent)\n              malformed = onError(current, 'has incoming rdf:rest arcs');\n            else\n              parent = quad;\n          }\n          else {\n            head = quad; // e.g. { :s :p (1 2) }\n            headPos = 'object';\n          }\n        }\n\n        // Store the list item and continue with parent\n        if (!first)\n          malformed = onError(current, 'has no list head');\n        else\n          items.unshift(first.object);\n        current = parent && parent.subject;\n      }\n\n      // Don't remove any quads if the list is malformed\n      if (malformed)\n        remove = false;\n      // Store the list under the value of its head\n      else if (head)\n        lists[head[headPos].value] = items;\n    });\n\n    // Remove list quads if requested\n    if (remove)\n      this.removeQuads(toRemove);\n    return lists;\n  }\n\n  // ### Store is an iterable.\n  // Can be used where iterables are expected: for...of loops, array spread operator,\n  // `yield*`, and destructuring assignment (order is not guaranteed).\n  *[Symbol.iterator]() {\n    yield* this.getQuads();\n  }\n}\n\n// Determines whether the argument is a string\nfunction isString(s) {\n  return typeof s === 'string' || s instanceof String;\n}\n\n/**\n * A class that implements both DatasetCore and Readable.\n */\nclass DatasetCoreAndReadableStream extends Readable {\n  constructor(n3Store, subject, predicate, object, graph) {\n    super({ objectMode: true });\n    Object.assign(this, { n3Store, subject, predicate, object, graph });\n  }\n\n  get filtered() {\n    if (!this._filtered) {\n      const { n3Store, graph, object, predicate, subject } = this;\n      const quads = n3Store.getQuads(subject, predicate, object, graph);\n      this._filtered = new N3Store(quads, { factory: n3Store._factory });\n    }\n    return this._filtered;\n  }\n  get size() {\n    return this.filtered.size;\n  }\n\n  _read() {\n    for (const quad of this.filtered.getQuads())\n      this.push(quad);\n    this.push(null);\n  }\n\n  add(quad) {\n    return this.filtered.add(quad);\n  }\n\n  delete(quad) {\n    return this.filtered.delete(quad);\n  }\n\n  has(quad) {\n    return this.filtered.has(quad);\n  }\n\n  match(subject, predicate, object, graph) {\n    return new DatasetCoreAndReadableStream(this.filtered, subject, predicate, object, graph);\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.filtered.getQuads();\n  }\n}\n","// **N3StreamParser** parses a text stream into a quad stream.\nimport N3Parser from './N3Parser';\nimport { Transform } from 'readable-stream';\n\n// ## Constructor\nexport default class N3StreamParser extends Transform {\n  constructor(options) {\n    super({ decodeStrings: true });\n    this._readableState.objectMode = true;\n\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\n    const parser = new N3Parser(options);\n    let onData, onEnd;\n    parser.parse({\n      on: (event, callback) => {\n        switch (event) {\n        case 'data': onData = callback; break;\n        case 'end':   onEnd = callback; break;\n        }\n      },\n    },\n      // Handle quads by pushing them down the pipeline\n      (error, quad) => { error && this.emit('error', error) || quad && this.push(quad); },\n      // Emit prefixes through the `prefix` event\n      (prefix, uri) => { this.emit('prefix', prefix, uri); }\n    );\n\n    // Implement Transform methods through parser callbacks\n    this._transform = (chunk, encoding, done) => { onData(chunk); done(); };\n    this._flush = done => { onEnd(); done(); };\n  }\n\n  // ### Parses a stream of strings\n  import(stream) {\n    stream.on('data',  chunk => { this.write(chunk); });\n    stream.on('end',   ()      => { this.end(); });\n    stream.on('error', error => { this.emit('error', error); });\n    return this;\n  }\n}\n","// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8', writableObjectMode: true });\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n","const RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    XSD  = 'http://www.w3.org/2001/XMLSchema#',\n    SWAP = 'http://www.w3.org/2000/10/swap/';\n\nexport default {\n  xsd: {\n    decimal: `${XSD}decimal`,\n    boolean: `${XSD}boolean`,\n    double:  `${XSD}double`,\n    integer: `${XSD}integer`,\n    string:  `${XSD}string`,\n  },\n  rdf: {\n    type:       `${RDF}type`,\n    nil:        `${RDF}nil`,\n    first:      `${RDF}first`,\n    rest:       `${RDF}rest`,\n    langString: `${RDF}langString`,\n  },\n  owl: {\n    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',\n  },\n  r: {\n    forSome: `${SWAP}reify#forSome`,\n    forAll:  `${SWAP}reify#forAll`,\n  },\n  log: {\n    implies: `${SWAP}log#implies`,\n  },\n};\n","// **N3Lexer** tokenizes N3 documents.\nimport namespaces from './IRIs';\nimport queueMicrotask from 'queue-microtask';\n\nconst { xsd } = namespaces;\n\n// Regular expression and replacement string to escape N3 strings\nconst escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\([^])/g;\nconst escapeReplacements = {\n  '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n  'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\n  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\n  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\n  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\n};\nconst illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\n\nconst lineModeRegExps = {\n  _iri: true,\n  _unescapedIri: true,\n  _simpleQuotedString: true,\n  _langcode: true,\n  _blank: true,\n  _newline: true,\n  _comment: true,\n  _whitespace: true,\n  _endOfFile: true,\n};\nconst invalidRegExp = /$0^/;\n\n// ## Constructor\nexport default class N3Lexer {\n  constructor(options) {\n    // ## Regular expressions\n    // It's slightly faster to have these as properties than as in-scope variables\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\n    this._simpleQuotedString = /^\"([^\"\\\\\\r\\n]*)\"(?=[^\"])/; // string without escape sequences\n    this._simpleApostropheString = /^'([^'\\\\\\r\\n]*)'(?=[^'])/;\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._number = /^[\\-+]?(?:(\\d+\\.\\d*|\\.?\\d+)[eE][\\-+]?|\\d*(\\.)?)\\d+(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\n    this._shortPredicates = /^a(?=[\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\n    this._comment = /#([^\\n\\r]*)/;\n    this._whitespace = /^[ \\t]+/;\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\n    options = options || {};\n\n    // In line mode (N-Triples or N-Quads), only simple features may be parsed\n    if (this._lineMode = !!options.lineMode) {\n      this._n3Mode = false;\n      // Don't tokenize special literals\n      for (const key in this) {\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)\n          this[key] = invalidRegExp;\n      }\n    }\n    // When not in line mode, enable N3 functionality by default\n    else {\n      this._n3Mode = options.n3 !== false;\n    }\n    // Don't output comment tokens by default\n    this._comments = !!options.comments;\n    // Cache the last tested closing position of long literals\n    this._literalClosingPos = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\n  _tokenizeToEnd(callback, inputFinished) {\n    // Continue parsing as far as possible; the loop will return eventually\n    let input = this._input;\n    const outputComments = this._comments;\n    while (true) {\n      // Count and skip whitespace lines\n      let whiteSpaceMatch, comment;\n      while (whiteSpaceMatch = this._newline.exec(input)) {\n        // Try to find a comment\n        if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))\n          callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n        // Advance the input\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n        this._line++;\n      }\n      // Skip whitespace on current line\n      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n\n      // Stop for now if we're at the end\n      if (this._endOfFile.test(input)) {\n        // If the input is finished, emit EOF\n        if (inputFinished) {\n          // Try to find a final comment\n          if (outputComments && (comment = this._comment.exec(input)))\n            callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });\n          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });\n        }\n        return this._input = input;\n      }\n\n      // Look for specific token types based on the first character\n      const line = this._line, firstChar = input[0];\n      let type = '', value = '', prefix = '',\n          match = null, matchLength = 0, inconclusive = false;\n      switch (firstChar) {\n      case '^':\n        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\n        if (input.length < 3)\n          break;\n        // Try to match a type\n        else if (input[1] === '^') {\n          this._previousMarker = '^^';\n          // Move to type IRI or prefixed name\n          input = input.substr(2);\n          if (input[0] !== '<') {\n            inconclusive = true;\n            break;\n          }\n        }\n        // If no type, it must be a path expression\n        else {\n          if (this._n3Mode) {\n            matchLength = 1;\n            type = '^';\n          }\n          break;\n        }\n        // Fall through in case the type is an IRI\n      case '<':\n        // Try to find a full IRI without escape sequences\n        if (match = this._unescapedIri.exec(input))\n          type = 'IRI', value = match[1];\n        // Try to find a full IRI with escape sequences\n        else if (match = this._iri.exec(input)) {\n          value = this._unescape(match[1]);\n          if (value === null || illegalIriChars.test(value))\n            return reportSyntaxError(this);\n          type = 'IRI';\n        }\n        // Try to find a nested triple\n        else if (input.length > 1 && input[1] === '<')\n          type = '<<', matchLength = 2;\n        // Try to find a backwards implication arrow\n        else if (this._n3Mode && input.length > 1 && input[1] === '=')\n          type = 'inverse', matchLength = 2, value = '>';\n        break;\n\n      case '>':\n        if (input.length > 1 && input[1] === '>')\n          type = '>>', matchLength = 2;\n        break;\n\n      case '_':\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a blank node.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if ((match = this._blank.exec(input)) ||\n            inputFinished && (match = this._blank.exec(`${input} `)))\n          type = 'blank', prefix = '_', value = match[1];\n        break;\n\n      case '\"':\n        // Try to find a literal without escape sequences\n        if (match = this._simpleQuotedString.exec(input))\n          value = match[1];\n        // Try to find a literal wrapped in three pairs of quotes\n        else {\n          ({ value, matchLength } = this._parseLiteral(input));\n          if (value === null)\n            return reportSyntaxError(this);\n        }\n        if (match !== null || matchLength !== 0) {\n          type = 'literal';\n          this._literalClosingPos = 0;\n        }\n        break;\n\n      case \"'\":\n        if (!this._lineMode) {\n          // Try to find a literal without escape sequences\n          if (match = this._simpleApostropheString.exec(input))\n            value = match[1];\n          // Try to find a literal wrapped in three pairs of quotes\n          else {\n            ({ value, matchLength } = this._parseLiteral(input));\n            if (value === null)\n              return reportSyntaxError(this);\n          }\n          if (match !== null || matchLength !== 0) {\n            type = 'literal';\n            this._literalClosingPos = 0;\n          }\n        }\n        break;\n\n      case '?':\n        // Try to find a variable\n        if (this._n3Mode && (match = this._variable.exec(input)))\n          type = 'var', value = match[0];\n        break;\n\n      case '@':\n        // Try to find a language code\n        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))\n          type = 'langcode', value = match[1];\n        // Try to find a keyword\n        else if (match = this._keyword.exec(input))\n          type = match[0];\n        break;\n\n      case '.':\n        // Try to find a dot as punctuation\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\n          type = '.';\n          matchLength = 1;\n          break;\n        }\n        // Fall through to numerical case (could be a decimal dot)\n\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '+':\n      case '-':\n        // Try to find a number. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a number.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if (match = this._number.exec(input) ||\n            inputFinished && (match = this._number.exec(`${input} `))) {\n          type = 'literal', value = match[0];\n          prefix = (typeof match[1] === 'string' ? xsd.double :\n                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));\n        }\n        break;\n\n      case 'B':\n      case 'b':\n      case 'p':\n      case 'P':\n      case 'G':\n      case 'g':\n        // Try to find a SPARQL-style keyword\n        if (match = this._sparqlKeyword.exec(input))\n          type = match[0].toUpperCase();\n        else\n          inconclusive = true;\n        break;\n\n      case 'f':\n      case 't':\n        // Try to match a boolean\n        if (match = this._boolean.exec(input))\n          type = 'literal', value = match[0], prefix = xsd.boolean;\n        else\n          inconclusive = true;\n        break;\n\n      case 'a':\n        // Try to find an abbreviated predicate\n        if (match = this._shortPredicates.exec(input))\n          type = 'abbreviation', value = 'a';\n        else\n          inconclusive = true;\n        break;\n\n      case '=':\n        // Try to find an implication arrow or equals sign\n        if (this._n3Mode && input.length > 1) {\n          type = 'abbreviation';\n          if (input[1] !== '>')\n            matchLength = 1, value = '=';\n          else\n            matchLength = 2, value = '>';\n        }\n        break;\n\n      case '!':\n        if (!this._n3Mode)\n          break;\n      case ',':\n      case ';':\n      case '[':\n      case ']':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n        if (!this._lineMode) {\n          matchLength = 1;\n          type = firstChar;\n        }\n        break;\n\n      default:\n        inconclusive = true;\n      }\n\n      // Some first characters do not allow an immediate decision, so inspect more\n      if (inconclusive) {\n        // Try to find a prefix\n        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&\n            (match = this._prefix.exec(input)))\n          type = 'prefix', value = match[1] || '';\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a prefixed name.\n        // Therefore, try inserting a space if we're at the end of the input.\n        else if ((match = this._prefixed.exec(input)) ||\n                 inputFinished && (match = this._prefixed.exec(`${input} `)))\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\n      }\n\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read\n      if (this._previousMarker === '^^') {\n        switch (type) {\n        case 'prefixed': type = 'type';    break;\n        case 'IRI':      type = 'typeIRI'; break;\n        default:         type = '';\n        }\n      }\n\n      // What if nothing of the above was found?\n      if (!type) {\n        // We could be in streaming mode, and then we just wait for more input to arrive.\n        // Otherwise, a syntax error has occurred in the input.\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\n          return reportSyntaxError(this);\n        else\n          return this._input = input;\n      }\n\n      // Emit the parsed token\n      const token = { line: line, type: type, value: value, prefix: prefix };\n      callback(null, token);\n      this.previousToken = token;\n      this._previousMarker = type;\n      // Advance to next part to tokenize\n      input = input.substr(matchLength || match[0].length, input.length);\n    }\n\n    // Signals the syntax error through the callback\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\n  }\n\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters\n  _unescape(item) {\n    let invalid = false;\n    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {\n      // 4-digit unicode character\n      if (typeof unicode4 === 'string')\n        return String.fromCharCode(Number.parseInt(unicode4, 16));\n      // 8-digit unicode character\n      if (typeof unicode8 === 'string') {\n        let charCode = Number.parseInt(unicode8, 16);\n        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) :\n          String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\n      }\n      // fixed escape sequence\n      if (escapedChar in escapeReplacements)\n        return escapeReplacements[escapedChar];\n      // invalid escape sequence\n      invalid = true;\n      return '';\n    });\n    return invalid ? null : replaced;\n  }\n\n  // ### `_parseLiteral` parses a literal into an unescaped value\n  _parseLiteral(input) {\n    // Ensure we have enough lookahead to identify triple-quoted strings\n    if (input.length >= 3) {\n      // Identify the opening quote(s)\n      const opening = input.match(/^(?:\"\"\"|\"|'''|'|)/)[0];\n      const openingLength = opening.length;\n\n      // Find the next candidate closing quotes\n      let closingPos = Math.max(this._literalClosingPos, openingLength);\n      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {\n        // Count backslashes right before the closing quotes\n        let backslashCount = 0;\n        while (input[closingPos - backslashCount - 1] === '\\\\')\n          backslashCount++;\n\n        // An even number of backslashes (in particular 0)\n        // means these are actual, non-escaped closing quotes\n        if (backslashCount % 2 === 0) {\n          // Extract and unescape the value\n          const raw = input.substring(openingLength, closingPos);\n          const lines = raw.split(/\\r\\n|\\r|\\n/).length - 1;\n          const matchLength = closingPos + openingLength;\n          // Only triple-quoted strings can be multi-line\n          if (openingLength === 1 && lines !== 0 ||\n              openingLength === 3 && this._lineMode)\n            break;\n          this._line += lines;\n          return { value: this._unescape(raw), matchLength };\n        }\n        closingPos++;\n      }\n      this._literalClosingPos = input.length - openingLength + 1;\n    }\n    return { value: '', matchLength: 0 };\n  }\n\n  // ### `_syntaxError` creates a syntax error for the given issue\n  _syntaxError(issue) {\n    this._input = null;\n    const err = new Error(`Unexpected \"${issue}\" on line ${this._line}.`);\n    err.context = {\n      token: undefined,\n      line: this._line,\n      previousToken: this.previousToken,\n    };\n    return err;\n  }\n\n  // ## Public methods\n\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\n  // The input can be a string or a stream.\n  tokenize(input, callback) {\n    this._line = 1;\n\n    // If the input is a string, continuously emit tokens through the callback until the end\n    if (typeof input === 'string') {\n      this._input = input;\n      // If a callback was passed, asynchronously call it\n      if (typeof callback === 'function')\n        queueMicrotask(() => this._tokenizeToEnd(callback, true));\n      // If no callback was passed, tokenize synchronously and return\n      else {\n        const tokens = [];\n        let error;\n        this._tokenizeToEnd((e, t) => e ? (error = e) : tokens.push(t), true);\n        if (error) throw error;\n        return tokens;\n      }\n    }\n    // Otherwise, the input must be a stream\n    else {\n      this._input = '';\n      this._pendingBuffer = null;\n      if (typeof input.setEncoding === 'function')\n        input.setEncoding('utf8');\n      // Adds the data chunk to the buffer and parses as far as possible\n      input.on('data', data => {\n        if (this._input !== null && data.length !== 0) {\n          // Prepend any previous pending writes\n          if (this._pendingBuffer) {\n            data = Buffer.concat([this._pendingBuffer, data]);\n            this._pendingBuffer = null;\n          }\n          // Hold if the buffer ends in an incomplete unicode sequence\n          if (data[data.length - 1] & 0x80) {\n            this._pendingBuffer = data;\n          }\n          // Otherwise, tokenize as far as possible\n          else {\n            this._input += data;\n            this._tokenizeToEnd(callback, false);\n          }\n        }\n      });\n      // Parses until the end\n      input.on('end', () => {\n        if (this._input !== null)\n          this._tokenizeToEnd(callback, true);\n      });\n      input.on('error', callback);\n    }\n  }\n}\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n"],"sourceRoot":""}